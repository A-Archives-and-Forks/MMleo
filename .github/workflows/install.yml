name: install

on:
  push:
    tags:
      - "v*"
    branches:
      - "**"
    paths:
      - ".github/workflows/install.yml"
      - "assets/**"
      - "**.py"
  pull_request:
    branches:
      - "**"
    paths:
      - ".github/workflows/install.yml"
      - "assets/**"
      - "**.py"
  workflow_dispatch:

env:
  MaaFw_tag: v4.4.0
  MFA_tag: v1.5.3
  app_name: MMleo

permissions:
  contents: write
  actions: write

jobs:
  meta:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: set_tag
        run: |
          is_release=${{ startsWith(github.ref, 'refs/tags/v') }}
          tag=$(git describe --tags --match "v*" ${{ github.ref }} || true)
          if [[ $tag != v* ]]; then
            tag=$(curl -sX GET "https://api.github.com/repos/${{ github.repository }}/releases/latest" --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | awk '/tag_name/{print $4}' FS='["]')
            if [[ $tag != v* ]]; then
              tag="v0.0.0"
            fi
            tag=$(date "+$tag-%y%m%d-$(git rev-parse --short HEAD)")
          fi
          if ! $($is_release) ; then
            prefix=${tag%-*-*}
            suffix=${tag#$prefix-}
            tag="$prefix-ci.$suffix"
          fi

          echo tag=$tag | tee -a $GITHUB_OUTPUT
          echo is_release=$is_release | tee -a $GITHUB_OUTPUT
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
      is_release: ${{ steps.set_tag.outputs.is_release }}
      
  install:
    needs: meta
    runs-on: windows-latest
    strategy:
      matrix:
        os: [win, macos, linux]
        arch: [aarch64, x86_64]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          
      - name: Download MaaFramework
        uses: robinraju/release-downloader@v1
        with:
          repository: MaaXYZ/MaaFramework
          fileName: "MAA-${{ matrix.os }}-${{ matrix.arch }}*"
          # latest: true
          tag: "${{ env.MaaFw_tag }}"
          preRelease: false
          out-file-path: "deps"
          extract: true
          
      - name: Setup Embed Python
        shell: powershell
        run: |
          ./tools/ci/setup_embed_python.ps1
          
      - name: Install
        shell: bash
        # env:
        #   TARGET_OS: ${{ matrix.os }}
        #   # 根本没用上
        run: |
          python ./install.py ${{ needs.meta.outputs.tag }}
          
      - name: Set up MFAAvalonia naming
        id: mfa_naming
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "win" ]; then
            echo "mfa_os=win" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" = "macos" ]; then
            echo "mfa_os=osx" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" = "linux" ]; then
            echo "mfa_os=linux" >> $GITHUB_OUTPUT
          else
            echo "mfa_os=unknown" >> $GITHUB_OUTPUT
          fi
          
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            echo "mfa_arch=x64" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.arch }}" = "aarch64" ]; then
            echo "mfa_arch=arm64" >> $GITHUB_OUTPUT
          else
            echo "mfa_arch=unknown" >> $GITHUB_OUTPUT
          fi
          
      # - name: Download MFA
      #   if: ${{ matrix.os != 'android' }}
      #   uses: robinraju/release-downloader@v1
      #   with:
      #     repository: SweetSmellFox/MFAAvalonia
      #     fileName: "MFAAvalonia-*${{ steps.mfa_naming.outputs.mfa_os }}-${{ steps.mfa_naming.outputs.mfa_arch }}*"
      #     latest: true
      #     out-file-path: "MFAAvalonia"
      #     extract: true
          
      #指定mfa版本
      - name: Download  MFAAvalonia
        uses: robinraju/release-downloader@v1  
        with:
          repository: SweetSmellFox/MFAAvalonia
          fileName: "MFAAvalonia-*-win-x64*"
          # preRelease: true #指定预发布版用，正式版时去掉
          tag: "${{ env.MFA_tag }}"
          out-file-path: "MFAAvalonia"
          extract: true

      - name: Install MFAAvalonia
        if: ${{ matrix.os != 'android' }}
        shell: bash
        # 固定的安装步骤，jq用于修改mfa的interface配置，rm用于清理安装包,mv修正interface文件名
        run: |
          rm -rf MFAAvalonia/resource/base/model
          cp -r MFAAvalonia/* install 
          jq --arg version_name "${{ env.app_name }}" --arg url ""https://github.com/fictionalflaw/MMleo"" --arg version ${{ needs.meta.outputs.tag }} '. + {"name": $version_name, "url": $url,"version": $version}' install/interface.json > install/interface.json.tmp
          rm -rf install/MFAAvalonia-*${{ steps.mfa_naming.outputs.mfa_os }}-${{ steps.mfa_naming.outputs.mfa_arch }}*
          mv -f install/interface.json.tmp install/interface.json
          
      - name: Replace Icon
        shell: bash
        run: |
          cp logo.ico install/logo.ico
          cp logo.ico install/Assets/logo.ico

      - name: Packing Launcher
        if: ${{matrix.os == 'win' }}
        working-directory: launcher
        shell: bash
        run: |
          python -m pip install pyinstaller
          pyinstaller --onefile --icon=../logo.ico --windowed MMleo.py
      
      - name: Install Tools
        if: ${{matrix.os == 'win' }}
        shell: bash
        run: |
          cp launcher/dist/MMleo.exe install/MMleo.exe

      - uses: actions/upload-artifact@v4
        with:
          name: MMleo-${{ matrix.os }}-${{ matrix.arch }}-${{ needs.meta.outputs.tag }}
          path: "install"

  # windows:
  #   needs: meta
  #   runs-on: windows-latest
  #   strategy:
  #     matrix:
  #       arch: [aarch64, x86_64]
  #     fail-fast: false

  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: true

  #     - name: Download MaaFramework
  #       uses: robinraju/release-downloader@v1
  #       with:
  #         repository: MaaXYZ/MaaFramework
  #         fileName: "MAA-win-${{ matrix.arch }}*"
  #         tag: "${{ env.MaaFw_tag }}"
  #         out-file-path: "deps"
  #         extract: true

  #     - name: Download  MFAAvalonia
  #       uses: robinraju/release-downloader@v1  
  #       with:
  #         repository: SweetSmellFox/MFAAvalonia
  #         fileName: "MFAAvalonia-*-win-x64*"
  #         tag: "${{ env.MFA_tag }}"
  #         out-file-path: "MFA"
  #         extract: true

  #     - name: Setup Embed Python
  #       shell: powershell
  #       run: |
  #         ./tools/ci/setup_embed_python.ps1

  #     - name: Install
  #       shell: bash
  #       run: python ./install.py ${{ needs.meta.outputs.tag }}
        
  #     - name: Copy MFAAvalonia
  #       shell: bash
  #       run: |
  #         cp MFA/MFAAvalonia.exe MFA/MFAUpdater.exe MFA/MFAUpdater.dll MFA/MFAUpdater.runtimeconfig.json MFA/av_libglesv2.dll MFA/libHarfBuzzSharp.dll MFA/libonigwrap.dll MFA/libSkiaSharp.dll MFA/uiohook.dll install/
  #         jq --arg version_name "${{ env.app_name }}" --arg url ""https://github.com/fictionalflaw/MMleo"" --arg version ${{ needs.meta.outputs.tag }} '. + {"name": $version_name, "url": $url,"version": $version}' install/interface.json > install/interface.json.tmp
  #         mv -f install/interface.json.tmp install/interface.json

  #     - name: Upload
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ env.app_name }}-win-${{ matrix.arch }}
  #         path: "install"


  changelog:
    name: Generate changelog
    runs-on: ubuntu-latest
    outputs:
      release_body: ${{ steps.git-cliff.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        with:
          config: .github/cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md
          GITHUB_REPO: ${{ github.repository }}
  release:
    if: ${{ needs.meta.outputs.is_release == 'true' }}
    # needs: [meta, windows, ubuntu, macos]
    needs: [meta, install,changelog]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: assets
      - run: |
          cd assets
          for f in *; do
            (cd $f && zip -r ../$f-${{ needs.meta.outputs.tag }}.zip .)
          done
      - uses: softprops/action-gh-release@v2
        with:
          files: assets/*
          tag_name: ${{ needs.meta.outputs.tag }}
          body: ${{ needs.changelog.outputs.release_body }}
          draft: false

      - name: Trigger MirrorChyanUploading
        run: |
          gh workflow run --repo $GITHUB_REPOSITORY mirrorchyan
          gh workflow run --repo $GITHUB_REPOSITORY mirrorchyan_release_note
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
